% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ll_circular_mixed.R
\name{ll_circular_mixed}
\alias{ll_circular_mixed}
\title{Local Linear Circular Regression Estimator with Mixed Predictors}
\usage{
ll_circular_mixed(
  x0,
  z0,
  X,
  Z,
  theta,
  h,
  lambda,
  kernel_continuous = gaussian_kernel,
  kernel_categorical = aitchison_aitken_kernel,
  kernel_levels = NULL
)
}
\arguments{
\item{x0}{Numeric vector of length \code{k} with the values of the continuous predictors at the target point.}

\item{z0}{Vector of length \code{p} with the values of the categorical predictors at the target point.}

\item{X}{Matrix of continuous predictors (\code{n x k}).}

\item{Z}{Data frame or matrix of categorical predictors (\code{n x p}).}

\item{theta}{Vector of circular responses (in radians).}

\item{h}{Vector of bandwidths for the continuous variables (length \code{k}).}

\item{lambda}{Vector of smoothing parameters for the categorical variables (length \code{p}).}

\item{kernel_continuous}{Function to use as kernel for continuous predictors (e.g., \code{gaussian_kernel}).}

\item{kernel_categorical}{Function to use as kernel for categorical predictors (e.g., \code{aitchison_aitken_kernel} or \code{ordinal_kernel}).}

\item{kernel_levels}{Optional list of levels for each categorical variable (needed by some categorical kernels).}
}
\value{
A numeric scalar: estimated circular regression value at \code{(x0, z0)} in radians.
}
\description{
Computes the nonparametric circular regression estimate at a given point
using a local linear product-kernel estimator with both continuous and categorical predictors.
}
\examples{
set.seed(123)
n <- 30
X <- matrix(runif(n), ncol = 1)
Z <- data.frame(group = sample(c("A", "B", "C"), n, replace = TRUE))
theta <- 2 * pi * X[,1] + rnorm(n, sd = 0.2)

x0 <- 0.5
z0 <- "B"
h <- 0.2
lambda <- 0.3
levels_list <- list(c("A", "B", "C"))

gaussian_kernel <- function(u) exp(-0.5 * u^2) / sqrt(2 * pi)
ordinal_kernel <- function(z, zi, lambda, levels) {
  d <- abs(match(z, levels) - match(zi, levels))
  (1 - lambda)^d
}

ll_circular_mixed(
  x0 = x0, z0 = z0,
  X = X, Z = Z,
  theta = theta,
  h = h, lambda = lambda,
  kernel_continuous = gaussian_kernel,
  kernel_categorical = ordinal_kernel,
  kernel_levels = levels_list
)

}
